{
  "openapi": "3.0.1",
  "info": {
    "title": "Task manager Node.js Application API",
    "description": "Task manager Node.js Application API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "API for users in the system"
    },
    {
      "name": "Tasks",
      "description": "API for tasks in the system"
    }
  ],
  "paths": {
    "/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create all tasks in system",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not found. Please, authorize.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something wrond. Try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create new task in system",
        "requestBody": {
          "description": "Task that we want to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskRequest"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskRequest"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "User not found. Please, authorize.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something wrond. Try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get task with given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of task that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRequest"
                }
              }
            }
          },
          "401": {
            "description": "User not found. Please, authorize.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something wrond. Try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete task with given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of task that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task is deleted",
            "content": {}
          },
          "401": {
            "description": "User not found. Please, authorize.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something wrond. Try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update task with given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of task that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Task with new values of properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdateRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Task is updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          },
          "401": {
            "description": "User not found. Please, authorize.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Something wrond. Try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "FailedResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "TaskRequest": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          }
        }
      },
      "TaskUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          }
        }
      },
      "TaskResponse": {
        "required": [
          "_id",
          "completed",
          "createdAt",
          "description",
          "owner",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          },
          "owner": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}