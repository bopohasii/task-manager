{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Task manager Node.js Application API",
    "description": "Task manager Node.js Application API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "tags": [
    {
      "name": "Users",
      "description": "API for users in the system"
    },
    {
      "name": "Tasks",
      "description": "API for tasks in the system"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json",
    "multipart/form-data"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create new task in system",
        "parameters": [
          {
            "name": "task",
            "in": "body",
            "description": "Task that we want to create",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskRequest"
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create all tasks in system",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskResponse"
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of task that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get task with given ID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskRequest"
            }
          }
        }
      },
      "patch": {
        "summary": "Update task with given ID",
        "tags": [
          "Tasks"
        ],
        "parameters": [
          {
            "name": "task",
            "in": "body",
            "description": "Task with new values of properties",
            "schema": {
              "$ref": "#/definitions/TaskUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task is updated",
            "schema": {
              "$ref": "#/definitions/TaskResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete task with given ID",
        "responses": {
          "200": {
            "description": "Task is deleted"
          }
        }
      }
    }
  },
  "definitions": {
    "TaskRequest": {
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "completed": {
          "type": "boolean"
        }
      }
    },
    "TaskUpdateRequest": {
      "properties": {
        "description": {
          "type": "string"
        },
        "completed": {
          "type": "boolean"
        }
      }
    },
    "TaskResponse": {
      "required": [
        "_id",
        "description",
        "completed",
        "owner",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "completed": {
          "type": "boolean"
        },
        "owner": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}